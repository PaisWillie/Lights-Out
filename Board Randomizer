
——————————————————————————————————————————————————————————————————————————————————————————————————————————————
This method of board randomization prevents unsolvable boards that may cause issues when running your program.

Common mistakes with randomizing the game board is when randomizing which lights are on,
the adjacent lights to the light are not toggled along with it.
——————————————————————————————————————————————————————————————————————————————————————————————————————————————

————————————————————
~ INCORRECT METHOD ~
————————————————————

// Initializes 2D array to determine if each light is on.
boolean[][] lights = new boolean[5][5];

// Counted loop to select each row of the board.
for (int row = 0; row < 5; row++)
  // Counted loop to select each column of the board.
  for (int column = 0; column < 5; column++)
    // Initializes all the lights in the array to off (false).
    lights[column][row] = false;

// Creates two integer variables (row & column).
int randomRow, randomColumn;

// Counted loop to change the board 25 times to make the board more 'randomized.'
for (int count = 0; count < 25; count++) {

  // Generates a random row number between 0 and 4.
  randomRow = (int) (Math.random() * 5);
  // Generates a random column number between 0 and 4.
  randomColumn = (int) (Math.random() * 5);

  // Toggles the light that was generated by the random row & column number 
  lights[randomColumn][randomRow] = !lights[randomColumn][randomRow];

}

——————————————————————————————————————————————————————————————————————————————————————————————————————————————
The occasional issue with the method above is that the toggling of the lights does not math the
method that the player uses to toggle the lights, as it only toggles a single light,
and not the ones around it.

The correct method of randomizing the game board is to start from a solved state (all off),
then toggle the light that was chosen from two random numbers generated,
but also toggling the lights adjacent to it (above, below, to the left, and to the right).

By doing this, it is for certain that the board is solveable, as the computer randomizes the board
by doing the actions the player would do to randomize board,
selecting a light and toggling the ones around it.

Another anology would be as if you started from a solved state, and you could do the reverse the moves
that the computer generated to unscramble the board back to its solved state.
——————————————————————————————————————————————————————————————————————————————————————————————————————————————

————————————————————
 ~ CORRECT METHOD ~
————————————————————

// Initializes 2D array to determine if each light is on.
boolean[][] lights = new boolean[5][5];

// Counted loop to select each row of the board.
for (int row = 0; row < 5; row++)

  // Counted loop to select each column of the board.
  for (int column = 0; column < 5; column++)
  
    // Initializes all the lights in the array to off (false).
    lights[column][row] = false;

// Creates two integer variables (row & column).
int randomRow, randomColumn;

// Counted loop to change the board 25 times to make the board more 'randomized.'
for (int count = 0; count < 25; count++) {

  // Generates a random row number between 0 and 4.
  randomRow = (int) (Math.random() * 5);
  
  // Generates a random column number between 0 and 4.
  randomColumn = (int) (Math.random() * 5);

  // Toggles the light that was generated by the random row & column number 
  lights[randomColumn][randomRow] = !lights[randomColumn][randomRow];
  
  // Tests if there is a light located underneath the selected light
  if (column + 1 <= 4)
  
    // Toggles the light below the selected light
    lights[randomColumn + 1][randomRow] = !lights[randomColumn + 1][randomRow];
    
  // Tests if there is a light located above the selected light
  else if (column - 1 >= 0)
  
    // Toggles the light above the selected light
    lights[randomColumn - 1][randomRow] = !lights[randomColumn - 1][randomRow];
    
  // Tests if there is a light located to the right the selected light
  else if (row + 1 <= 4)
  
    // Toggles the light to the right of the selected light
    lights[randomColumn][randomRow + 1] = !lights[randomColumn][randomRow + 1];
    
  // Tests if there is a light located to the left the selected light
  else if (row - 1 >= 0)
  
    // Toggles the light to the left of the selected light
    lights[randomColumn][randomRow - 1] = !lights[randomColumn][randomRow - 1];

}

——————————————————————————————————————————————————————————————————————————————————————————————————————————————
Additional fixes for the program includes:

- Making the 2D array that stores the light state as public to be accessible by other methods

- Putting the light toggling code in a seperate method & moving the math.Random function
inside the parameters when calling the light toggling method, removing the necessity
for the randomRow & randomColumn varialbes

- Adding a do/while loop to repeatedly randomize the board until a certain amount of lights are toggled on
——————————————————————————————————————————————————————————————————————————————————————————————————————————————
